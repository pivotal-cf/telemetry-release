#!/usr/bin/env bash

set -eu

rm -f /var/vcap/data/telemetry-collector/*.tar
chown -R vcap:vcap /var/vcap/jobs/telemetry-collector/config/
COLLECTOR_BIN=/var/vcap/packages/telemetry-cli/telemetry-cli-linux

# Update value usage function
create_or_update_options() {
    local file_path=$1
    local op_data_key="operational-data-only:"

    local strings_to_remove=(
      "cf-api-url"
      "usage-service-url"
      "usage-service-client-id"
      "usage-service-client-secret"
      "usage-service-insecure-skip-tls-verify"
      "usage-service-timeout"
    )

    # We only need to process the file if the
    # data-collection-multi-select-options property
    # exists. If it doesn't, that indicates that the
    # tile that set these properties is from the 1.x
    # line and didn't allow users to choose operational_data
    # without ceip_data.
    if ! grep -q "data-collection-multi-select-options:" "$file_path"; then
        return
    fi

    local multiselect_value=$(grep "data-collection-multi-select-options:" "$file_path" | awk '{$1=""; print $0}' | tr -d ' ')

    # If only ceip is selected, remove the usage service variables
    if [ "$multiselect_value" == '["ceip_data"]' ]; then
        for string in "${strings_to_remove[@]}"; do
            sed -i.bak "/$string/d" "$file_path"
        done
    fi

    # If tas-installed-selector == 'Disabled', remove the usage service variables
    local tas_installed_value=$(grep "tas-installed-selector:" "$file_path" | awk '{$1=""; print $0}' | tr -d ' ')

    if [ "$tas_installed_value" == 'Disabled' ]; then
        for string in "${strings_to_remove[@]}"; do
            sed -i.bak "/$string/d" "$file_path"
        done
    fi

    # Append `https://app-usage.` to usage-service-url if it
    # has a value and doesn't already start with `http`.
    local usage_service_value=$(grep "usage-service-url:" "$file_path" | awk -F': ' '{print $2}' | tr -d ' ')
    if [[ -n "$usage_service_value" && ! "$usage_service_value" =~ ^http ]]; then
        local updated_value="https://app-usage.$usage_service_value"

        sed -i.bak "s~usage-service-url: $usage_service_value~usage-service-url: $updated_value~" "$file_path"
    fi


    # Set correct value for operational-data-only (either true or false).
    # Create this property if it doesn't already exist.
    if ! grep -q "$op_data_key" "$file_path"; then
        if [ "$multiselect_value" == '["operational_data"]' ]; then
          echo "${op_data_key} true" >> "$file_path"
        else
          echo "${op_data_key} false" >> "$file_path"
        fi
    else
        if [ "$multiselect_value" == '["operational_data"]' ]; then
            sed -i.bak "/$op_data_key/{s/false/true/;}" "$file_path"
        else
            sed -i.bak "/$op_data_key/{s/true/false/;}" "$file_path"
        fi
    fi
}

# Config paths
pre_start_config="/var/vcap/jobs/telemetry-collector/config/pre-start-collect.yml"
config="/var/vcap/jobs/telemetry-collector/config/collect.yml"

# Check and update pre-start-collect.yml
create_or_update_options "$pre_start_config"

# Check and update collect.yml
create_or_update_options "$config"

$COLLECTOR_BIN collect --config "$1"

TAR_FILE=$(find /var/vcap/data/telemetry-collector -name "*.tar")

export no_proxy=<%= p("telemetry.proxy_settings.no_proxy") %>
export http_proxy=<%= p("telemetry.proxy_settings.http_proxy") %>
export https_proxy=<%= p("telemetry.proxy_settings.https_proxy") %>

audit_mode=<%= p("audit_mode") %>
if [ "${audit_mode}" != "true" ]; then
  $COLLECTOR_BIN send --path $TAR_FILE --api-key <%= p('telemetry.api_key') %> <% if_p("telemetry.endpoint_override") do |endpoint_override| %> --override-telemetry-endpoint <%= endpoint_override %> <% end %>
fi
