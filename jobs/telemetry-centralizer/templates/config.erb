<source>
  @type forward
  @id forward_input
  port <%= p('port') %>

  <transport tls>
    cert_path /var/vcap/jobs/telemetry-centralizer/config/cert.pem
    private_key_path /var/vcap/jobs/telemetry-centralizer/config/private_key.pem
    client_cert_auth true
    ca_path /var/vcap/jobs/telemetry-centralizer/config/ca_cert.pem
  </transport>
</source>

## accept and extract only telemetry messages
<filter **>
  @type telemetry
</filter>

## add telemetry centralizer version
<filter **>
  @type record_transformer
  <record>
    telemetry-centralizer-version 0.0.2
    telemetry-env-type <%= p('telemetry.env_type') %>
    <% if_p('telemetry.foundation_nickname') do |p| %>telemetry-foundation-nickname <%= p %> <% end %>
    telemetry-iaas-type <%= p('telemetry.iaas_type') %>
    telemetry-foundation-id <%= p('telemetry.foundation_id') %>
  </record>
</filter>

# BUILD PROXY STRINGS
<% @env_no_proxy = "no_proxy=" + p('telemetry.proxy_settings.no_proxy') %>
<% @env_http_proxy = "http_proxy=" + p('telemetry.proxy_settings.http_proxy') %>
<% @env_https_proxy = "https_proxy=" + p('telemetry.proxy_settings.https_proxy') %>

## match all and dump to console
<match **>
  @type copy
  <store>
    @type stdout
    @id stdout_output
  </store>

  <store>
    @type exec
    <% if p('audit_mode') %>
    <%= "command tee -a -p /var/vcap/sys/log/telemetry-centralizer/audit.log <" %>
    <% elsif p('telemetry.data_collection_multi_select_options') == ["operational_data"] %>
    <%= "command tee /dev/null <" %>
    <% else %>
    <%= "command #{@env_no_proxy} #{@env_http_proxy} #{@env_https_proxy} curl -s -K /var/vcap/jobs/telemetry-centralizer/config/curl_config <" %>
    <% end %>
    <format>
      @type json
    </format>

    <buffer>
      @type file
      path /var/vcap/data/telemetry-centralizer/tmp/output-buffer
      flush_interval <%= p('flush_interval') %>s
      chunk_limit_size 100KB
    </buffer>
  </store>
</match>
