resource_types:
- name: bbl-state-resource
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfinfrastructure/bbl-state-resource
- name: bosh-deployment
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cloudfoundry/bosh-deployment-resource
- name: pivnet
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pivotalcf/pivnet-resource
    tag: latest-final
- name: github-release
  type: registry-image
  source: {repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/github-release-resource}
- name: pcf-pool
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cftoolsmiths/toolsmiths-envs-resource

resources:
- name: bosh-cli-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: bosh-cli
    release: true
    access_token: ((telemetry-release-github-access-token))
- name: smith-cli-github-release
  type: github-release
  version:
    tag: 'v2.3.0'
  source:
    owner: pivotal
    repository: smith
    access_token: ((telemetry-release-github-access-token))
- name: om-cli-github-release
  type: github-release
  source:
    owner: pivotal-cf
    repository: om
    access_token: ((telemetry-release-github-access-token))
- name: telemetry-receiver-app
  type: cf
  source:
    api: ((pcf1-api-url))
    username: ((pcf1-username))
    password: ((pcf1-password))
    organization: ((pcf1-org))
    space: stage
- name: jammy-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent
- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/bpm-release
- name: telemetry-release
  type: git
  source:
    branch: main
    uri: git@github.com:pivotal-cf/telemetry-release
    private_key: ((telemetry-release-git-deploy-private-key))
    ignore_paths:
    - ci
- name: ci
  type: git
  source:
    branch: main
    uri: git@github.com:pivotal-cf/telemetry-release
    private_key: ((telemetry-release-git-deploy-private-key))
    paths:
    - ci
    - src
- name: telemetry-receiver-source
  type: git
  source:
    branch: main
    uri: git@github.com:pivotal-cf/telemetry-release
    paths:
    - src/acceptance_tests/telemetry_receiver
    - ci/tasks/run-telemetry-receiver-tests.*
    private_key: ((telemetry-release-git-deploy-private-key))
- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:pivotal-cf/telemetry-release
    branch: version
    file: VERSION
    private_key: ((telemetry-release-git-deploy-private-key))
- name: env-pool
  type: pcf-pool
  source:
    api_token: ((toolsmiths-api-token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: us_3_0_opsman_beta

- name: pivotal-telemetry-collector
  type: pivnet
  source:
    api_token: {{pivnet-api-token}}
    product_slug: pivotal-telemetry-collector
    copy_metadata: true

jobs:
- name: update-telemetry-collector
  plan:
    - in_parallel:
      - get: telemetry-release
      - get: ci
      - get: pivotal-telemetry-collector
        trigger: true
        params:
          unpack: true
          globs: ["*.tgz"]
      - get: bosh-cli-github-release
        params:
          globs:
          - bosh-cli-*-linux-amd64
    - task: update-release-package
      file: ci/ci/tasks/update-release-package.yml
      params:
        GCS_SERVICE_ACCOUNT_KEY: ((gcs-service-account-key))
        GITHUB_NAME: ((github-name))
        GITHUB_EMAIL: ((github-email))
    - put: telemetry-release
      params:
        repository: telemetry-release
        rebase: true

- name: deploy-telemetry-receiver-app
  serial_groups: [telemetry-receiver, telemetry-receiver-audit]
  plan:
  - in_parallel:
    - get: telemetry-release
      resource: telemetry-receiver-source
      trigger: true
    - get: ci
  - task: test-telemetry-receiver
    file: ci/ci/tasks/run-telemetry-receiver-tests.yml
  - put: telemetry-receiver-app
    params:
      manifest: telemetry-release/src/acceptance_tests/telemetry_receiver/manifest.yml
      environment_variables:
        VALID_API_KEYS: ((acceptance-loader-api-keys))
        MESSAGE_LIMIT: "50"

- name: run-centralizer-unit-tests
  serial_groups: [version]
  plan:
    - get: telemetry-release
      trigger: true
    - get: version
      params: {pre: build}
    - get: ci
    - task: run-centralizer-unit-tests
      file: ci/ci/tasks/run-centralizer-unit-tests.yml
    - put: version
      params: {file: version/version}

- name: deploy-telemetry-acceptance
  serial_groups: [acceptance]
  plan:
  - in_parallel:
    - get: jammy-stemcell
    - get: bpm-release
    - get: version
      passed: [run-centralizer-unit-tests]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: telemetry-release
      passed: [run-centralizer-unit-tests]
      trigger: true
    - get: ci
    - get: smith
      resource: smith-cli-github-release
      params:
        globs: ["*linux*"]
    - get: om
      resource: om-cli-github-release
      params:
        globs: ["*linux*"]
  - task: create-release
    file: ci/ci/tasks/create-release.yml
  - put: env-pool
    params:
      action: claim
  - task: telemetry-centralizer-acceptance-deployment
    file: ci/ci/tasks/deploy-telemetry.yml
    params:
      CENTRALIZER_DEPLOYMENT_NAME: ((centralizer-acceptance-deployment-name))
      AGENT_DEPLOYMENT_NAME: ((agent-acceptance-deployment-name))
      AUDIT_MODE: false
      LOADER_API_KEY: ((acceptance-loader-api-key))
      LOADER_ENDPOINT: ((acceptance-loader-url))
      ENV_TYPE: ((acceptance-env-type))
      IAAS_TYPE: ((acceptance-iaas-type))
      FOUNDATION_ID: ((acceptance-foundation-id))
      FOUNDATION_NICKNAME: ((acceptance-foundation-nickname))
      FLUSH_INTERVAL: ((acceptance-centralizer-flush-interval))
      COLLECTOR_CRON_SCHEDULE: ((collector-cron-schedule))
      OPSMANAGER_HOSTNAME: ((opsmanager-hostname))
      OPSMANAGER_CLIENT_NAME: ((opsmanager-client-name))
      OPSMANAGER_CLIENT_SECRET: ((opsmanager-client-secret))
      OPSMANAGER_INSECURE_SKIP_TLS_VERIFY: ((opsmanager-insecure-skip-tls-verify))
      CF_API_URL: ((usage-service-cf-api-url))
      USAGE_SERVICE_URL: ((usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((usage-service-client-secret))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: ((usage-service-insecure-skip-tls-verify))
      TOOLSMITHS_API_TOKEN: ((toolsmiths-api-token))

- name: deploy-telemetry-acceptance-audit
  serial_groups: [acceptance-audit]
  plan:
  - in_parallel:
    - get: jammy-stemcell
    - get: bpm-release
    - get: version
      passed: [run-centralizer-unit-tests]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: telemetry-release
      passed: [run-centralizer-unit-tests]
      trigger: true
    - get: ci
    - get: smith
      resource: smith-cli-github-release
      params:
        globs: ["*linux*"]
    - get: om
      resource: om-cli-github-release
      params:
        globs: ["*linux*"]
  - task: create-release
    file: ci/ci/tasks/create-release.yml
  - put: env-pool
    params:
      action: claim
  - task: telemetry-centralizer-acceptance-deployment
    file: ci/ci/tasks/deploy-telemetry.yml
    params:
      CENTRALIZER_DEPLOYMENT_NAME: ((centralizer-acceptance-audit-deployment-name))
      AGENT_DEPLOYMENT_NAME: ((agent-acceptance-audit-deployment-name))
      AUDIT_MODE: true
      LOADER_API_KEY: ((acceptance-loader-api-key-audit))
      LOADER_ENDPOINT: ((acceptance-loader-url))
      ENV_TYPE: ((acceptance-env-type))
      IAAS_TYPE: ((acceptance-iaas-type))
      FOUNDATION_ID: ((acceptance-foundation-id))
      FOUNDATION_NICKNAME: ((acceptance-foundation-nickname))
      FLUSH_INTERVAL: ((acceptance-centralizer-flush-interval))
      COLLECTOR_CRON_SCHEDULE: ((collector-cron-schedule))
      OPSMANAGER_HOSTNAME: ((opsmanager-hostname))
      OPSMANAGER_CLIENT_NAME: ((opsmanager-client-name))
      OPSMANAGER_CLIENT_SECRET: ((opsmanager-client-secret))
      OPSMANAGER_INSECURE_SKIP_TLS_VERIFY: ((opsmanager-insecure-skip-tls-verify))
      CF_API_URL: ((usage-service-cf-api-url))
      USAGE_SERVICE_URL: ((usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((usage-service-client-secret))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: ((usage-service-insecure-skip-tls-verify))
      TOOLSMITHS_API_TOKEN: ((toolsmiths-api-token))

- name: test-acceptance-audit
  serial_groups: [telemetry-receiver-audit, acceptance-audit]
  plan:
  - in_parallel:
    - get: telemetry-release
      passed: [deploy-telemetry-acceptance-audit]
      trigger: true
    - get: ci
    - get: version
      passed: [deploy-telemetry-acceptance-audit]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: smith
      resource: smith-cli-github-release
      params:
        globs: ["*linux*"]
    - get: om
      resource: om-cli-github-release
      params:
        globs: ["*linux*"]
    - get: env-pool
      passed: [deploy-telemetry-acceptance-audit]
  - task: test-acceptance-sends-to-centralizer
    attempts: 2
    file: ci/ci/tasks/test-acceptance-sends-to-centralizer.yml
    params:
      LOADER_URL: ((acceptance-loader-url))
      LOADER_API_KEY: ((acceptance-loader-api-key-audit))
      CENTRALIZER_BOSH_DEPLOYMENT: ((centralizer-acceptance-audit-deployment-name))
      AGENT_BOSH_DEPLOYMENT: ((agent-acceptance-audit-deployment-name))
      AGENT_BOSH_INSTANCE: ((agent-acceptance-instance-name))
      EXPECTED_ENV_TYPE: ((acceptance-env-type))
      EXPECTED_FOUNDATION_NICKNAME: ((acceptance-foundation-nickname))
      EXPECTED_IAAS_TYPE: ((acceptance-iaas-type))
      EXPECTED_FOUNDATION_ID: ((acceptance-foundation-id))
      AUDIT_MODE: true
      TOOLSMITHS_API_TOKEN: ((toolsmiths-api-token))
  on_success:
    put: env-pool
    params:
      action: unclaim
      env_file: env-pool/metadata

- name: test-acceptance-sends-to-centralizer
  serial_groups: [telemetry-receiver, acceptance]
  plan:
  - in_parallel:
    - get: telemetry-release
      passed: [deploy-telemetry-acceptance]
      trigger: true
    - get: ci
    - get: version
      passed: [deploy-telemetry-acceptance]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: smith
      resource: smith-cli-github-release
      params:
        globs: ["*linux*"]
    - get: om
      resource: om-cli-github-release
      params:
        globs: ["*linux*"]
    - get: env-pool
      passed: [deploy-telemetry-acceptance]
  - task: test-acceptance-sends-to-centralizer
    file: ci/ci/tasks/test-acceptance-sends-to-centralizer.yml
    params:
      LOADER_URL: ((acceptance-loader-url))
      LOADER_API_KEY: ((acceptance-loader-api-key))
      CENTRALIZER_BOSH_DEPLOYMENT: ((centralizer-acceptance-deployment-name))
      AGENT_BOSH_DEPLOYMENT: ((agent-acceptance-deployment-name))
      AGENT_BOSH_INSTANCE: ((agent-acceptance-instance-name))
      EXPECTED_ENV_TYPE: ((acceptance-env-type))
      EXPECTED_FOUNDATION_NICKNAME: ((acceptance-foundation-nickname))
      EXPECTED_IAAS_TYPE: ((acceptance-iaas-type))
      EXPECTED_FOUNDATION_ID: ((acceptance-foundation-id))
      TOOLSMITHS_API_TOKEN: ((toolsmiths-api-token))
  on_success:
    put: env-pool
    params:
      action: unclaim
      env_file: env-pool/metadata

- name: deploy-telemetry-staging
  plan:
  - in_parallel:
    - get: jammy-stemcell
    - get: bpm-release
    - get: version
      passed: [test-acceptance-sends-to-centralizer]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: telemetry-release
      passed: [test-acceptance-sends-to-centralizer]
      trigger: true
    - get: ci
    - get: smith
      resource: smith-cli-github-release
      params:
        globs: ["*linux*"]
    - get: om
      resource: om-cli-github-release
      params:
        globs: ["*linux*"]
  - task: create-release
    file: ci/ci/tasks/create-release.yml
  - task: deploy-telemetry
    file: ci/ci/tasks/deploy-telemetry.yml
    params:
      CENTRALIZER_DEPLOYMENT_NAME: ((centralizer-staging-deployment-name))
      AGENT_DEPLOYMENT_NAME: ((agent-staging-deployment-name))
      AUDIT_MODE: false
      LOADER_API_KEY: ((staging-loader-api-key))
      LOADER_ENDPOINT: ((staging-loader-endpoint))
      ENV_TYPE: ((staging-env-type))
      IAAS_TYPE: ((staging-iaas-type))
      FOUNDATION_ID: ((staging-foundation-id))
      FOUNDATION_NICKNAME: ((staging-foundation-nickname))
      FLUSH_INTERVAL: ((staging-centralizer-flush-interval))
      COLLECTOR_CRON_SCHEDULE: "0 0 * * *"
      OPSMANAGER_HOSTNAME: ((opsmanager-hostname))
      OPSMANAGER_CLIENT_NAME: ((opsmanager-client-name))
      OPSMANAGER_CLIENT_SECRET: ((opsmanager-client-secret))
      OPSMANAGER_INSECURE_SKIP_TLS_VERIFY: ((opsmanager-insecure-skip-tls-verify))
      CF_API_URL: ((usage-service-cf-api-url))
      USAGE_SERVICE_URL: ((usage-service-url))
      USAGE_SERVICE_CLIENT_ID: ((usage-service-client-id))
      USAGE_SERVICE_CLIENT_SECRET: ((usage-service-client-secret))
      USAGE_SERVICE_INSECURE_SKIP_TLS_VERIFY: ((usage-service-insecure-skip-tls-verify))
      TOOLSMITHS_API_TOKEN: ((toolsmiths-api-token))
      TOOLSMITHS_ENV: ((staging-toolsmiths-env))

- name: finalize-release
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: version
      params: {bump: final}
      passed: [deploy-telemetry-staging]
    - get: bosh-cli-github-release
      params:
        globs:
        - bosh-cli-*-linux-amd64
    - get: telemetry-release
      passed: [deploy-telemetry-staging]
    - get: ci
  - task: create-final-release
    file: ci/ci/tasks/create-final-release.yml
    params:
      GCS_SERVICE_ACCOUNT_KEY: ((gcs-service-account-key))
      GITHUB_NAME: ((github-name))
      GITHUB_EMAIL: ((github-email))
  - put: telemetry-release
    params:
      repository: telemetry-release
      tag: version/version

- name: auto-patch
  serial_groups: [version]
  plan:
  - get: version
    passed: [finalize-release]
    params: {bump: patch, pre: build}
    trigger: true
  - put: version
    params: {file: version/version}

- name: major
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major, pre: build}
  - put: version
    params: {file: version/version}

- name: minor
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor, pre: build}
  - put: version
    params: {file: version/version}

- name: patch
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch, pre: build}
  - put: version
    params: {file: version/version}
